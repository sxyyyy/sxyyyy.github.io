<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python Learning Chapter 1</title>
    <link href="/2024/07/03/Python-Learning-Chapter-1/"/>
    <url>/2024/07/03/Python-Learning-Chapter-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-Learning-Chapter-1"><a href="#Python-Learning-Chapter-1" class="headerlink" title="Python Learning Chapter 1"></a>Python Learning Chapter 1</h1><p>之前用过 python, 但是没学过, 或者说没系统的学过, 所以打算系统的学习一下, 以便了解一些 python 的特性和用法.</p><h2 id="Some-Features"><a href="#Some-Features" class="headerlink" title="Some Features"></a>Some Features</h2><h3 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h3><p>与 C&#x2F;C++ 不同, python 的变量不需要进行声明即可赋值, 也就是说, 在 python 中, 变量是没有一个确定的类型的, 甚至一个变量可以赋值为一个函数来使用(当然赋值为一个函数之后, 其使用方法也与该函数完全一致了), 反之亦然, 一个函数名也可以赋值后作为一个变量来使用, 只不过在赋值为一个变量后, 该函数名就不能作为一个函数来使用了, 而是变成了一个变量. 为了方便描述和理解, 我们不妨统一称“函数名”和“变量名”为“名”(name), </p><p>举个例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span> = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span><br><span class="hljs-number">3</span><br>&gt;&gt;&gt;<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-built_in">object</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">callable</span><br></code></pre></td></tr></table></figure><p>在这个例子中, max 是 python 内置的一个函数, 我们将其赋值为一个数之后, max 就变成了一个变量, 而不是一个函数, 此时若再将其作为一个函数来使用则会报错.</p><h3 id="Assignment-Statement"><a href="#Assignment-Statement" class="headerlink" title="Assignment Statement"></a>Assignment Statement</h3><p>python 支持同时为多个名进行赋值, 只需要在 &#x3D; 两端用 “,” 隔开即可.</p><p>举个例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>x, y = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>&#x3D; 右端与常规的对单个名的赋值完全一样, 既可以是数, 也可以是表达式. 与对左侧的变量依次赋值有不同的是, python 会先把右侧的值计算完, 然后再为左侧的名进行赋值, 也就是说, 先执行对右侧的计算, 再执行对左侧的赋值.</p><p>举个例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>x, y = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>x, y = y, x<br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>通过这个例子我们还可以找到一个交换两个名的方法.</p><p>既然是对名进行操作了, 当然既可以是变量也可以是函数了.</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/02/hello-world/"/>
    <url>/2024/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>这是我的新博客, <a href="https://www.cnblogs.com/sshadows">之前的博客</a>是在学 OI 的时候搭建的, 是由一个二货中学生搞的, 里面都是他学 OI 的时候写的乱七八糟的东西, 有些东西现在看来有些可笑. 其实大部分东西在现在看来都挺可笑的.</p><p>我并不打算把之前的东西迁移过来了, 这个博客就只记录我大学及以后的相关学习和经历.</p><p>之前写过的很多东西我可能也会重新再写一次, 比如数据结构什么的, 经过了这几年, 我对竞赛时期学习的数据结构和算法还有其内部蕴含的思想的理解也进一步的加深了, 也许再写一次会有新的理解和收获.</p><p>总之, 欢迎来玩.</p>]]></content>
    
    
    <categories>
      
      <category>Story</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Something</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
